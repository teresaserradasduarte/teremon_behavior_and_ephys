%% SESSION ANALYSIS - Detecting reaches
clear; close all; clc



%% FOLDER ORGANIZATION
raw_folder = 'D:\Learning Lab Dropbox\Learning Lab Team Folder\Patlab protocols\Data\TD\behavior_data\raw_data';
mat_folder = 'D:\Learning Lab Dropbox\Learning Lab Team Folder\Patlab protocols\Data\TD\behavior_data\analyzed_data\mat_files';
out_folder = 'D:\Learning Lab Dropbox\Learning Lab Team Folder\Patlab protocols\Data\TD\behavior_data\analyzed_data\output_files';

group = '20230511_ChocolateGroup';
setup = 'headfixed_dynamicTarget';
animals = {...
    'CoteDor',...
    'Lindt',...
    'Toblerone',...
    'Milka',...
    'FerreroRocher'};
animal_idx = 1;
mouse = sprintf('%i_%s',animal_idx,animals{animal_idx});
session_range = ['R6'];

% Mouse paw preference
% R -> righties | L-> Lefties
phenotype = 'CTR';
if ismember(animal_idx,[1,4,5])
    paw_pref = 'R';
elseif ismember(animal_idx,[2,3])
    paw_pref = 'L';
else
    print('unknown paw pref');
end

% Display and save
show_plot = false;
show_overview_reach_plot = false;
save_fig_flag = false;

% Mouse info to save
mouse_info.group = group;
mouse_info.mouse = mouse;
mouse_info.paw_pref = paw_pref;
mouse_info.phenotype = phenotype;

% Video / tracking parameters
%width = 500;
%height = 420;
likelihood_threshold = 0.9;
frame_rate = 400;    % Sampling frequency
T = 1/frame_rate;    % Sampling period
% calculated before (calibrations):
px2mm_y = 0.07;
px2mm_xz = 0.1;
offset_c2a = 2;
offset_c2a_z = 6;
%offset_c2a = 15;

% Figures handles
figOpt = {'color','w'};
axeOpt = {'linewidth',1.5,'box','off','GridAlpha',0.05,'ticklength',[1,1]*.01};


%% RUN LOOP OF SESSIONS - if many
num_sessions = size(session_range,1);

disp('Reading csvs and finding poses...')

%for s=1:num_sessions
s = 1;
sess = session_range(s,:);
session_path = strcat(raw_folder,filesep,group,filesep,setup,filesep,mouse,filesep,sess);
disp(strcat('SESSION:',{' '}, sess))

folders.raw = strcat(raw_folder, filesep, group, filesep, setup, filesep, mouse, filesep, sess, filesep, 'videosCut');
folders.mat = strcat(mat_folder, filesep, group, filesep, setup, filesep, mouse, filesep, sess);
if ~exist(folders.mat,'dir'), mkdir(folders.mat); end
folders.out = strcat(out_folder, filesep, group, filesep, setup, filesep, mouse, filesep, sess);
folders.out_preProc = strcat(folders.out,filesep,'preProc');
if ~exist(folders.out,'dir'), mkdir(folders.out); end
if save_fig_flag
    if ~exist(folders.out_preProc,'dir')
        mkdir(folders.out_preProc); end
    folder_reches_overview = strcat(folders.out,filesep,'reaches_overview');
    if ~exist(folder_reches_overview,"dir"), mkdir(folder_reches_overview); end
end
% Load behavior data
load(strcat(session_path,filesep,'behavior_session.mat'));


%% Load session raw data and organize per feature
if  exist(strcat(char(folders.mat),filesep,'session_raw_data_paw',paw_pref,'.mat'),'file')~=2

    % video params
    VideoMeta = VideoReader(strcat(folders.raw,filesep,sess,'-camA-trial0.avi'));
    width = VideoMeta.width;
    height = VideoMeta.height;

    % Data information
    % DNN
    resnet = 'DLC_resnet50_ChocolateGroupTrackingJun3shuffle1_2950000';

    % Find csvs with tracking
    searchstr=strcat(resnet,'.csv');
    csvs = wildcardsearch(folders.raw, searchstr, true);

    % Check nr of trials
    indA = find(contains(csvs,'camA'))';
    n_trials = length(indA)-1;
    siz = zeros(n_trials,1);

    % Find max number of frames in 1 trial
    tic
    disp('Loop through trials to find the n_max_points...')
    for i=1:n_trials % to ensure cronologinal ordering
        % cam A
        tmp_camA_csv = strcat(folders.raw, filesep,sess,'-camA-trial',num2str(i),resnet,'.csv');
        tmp_camA=csvread(tmp_camA_csv,3,1);
        siz(i)=size(tmp_camA,1);
    end
    [max_siz, max_siz_loc]=max(siz); % Check max size to define the mat length
    disp(strcat('Done: max= ',num2str(max_siz)))

    % Allocate space
    n_max_points = max_siz;
    bodyparts_nr = 12;
    camA = nan(n_max_points,bodyparts_nr*3,n_trials);
    camB = nan(n_max_points,bodyparts_nr*3,n_trials);

    camC = nan(n_max_points,bodyparts_nr*3,n_trials);
    % time
    time = nan(n_max_points,n_trials);

    % Read from csv
    tic
    disp('finding csvs ordered by cam/view...')
    camA_in_row = [];
    camB_in_row = [];
    camC_in_row = [];
    for i=1:n_trials % to ensure cronologinal ordering
        % cam A
        tmp_camA_csv = strcat(folders.raw, filesep,sess,'-camA-trial',num2str(i),resnet,'.csv');
        tmp_camA=csvread(tmp_camA_csv,3,1);
        camA(1:size(tmp_camA,1),:,i) = tmp_camA;
        time(1:size(tmp_camA,1),i) = (1:size(tmp_camA,1))./frame_rate;
        camA_in_row=cat(1,camA_in_row,tmp_camA);
        % cam B
        tmp_camB_csv = strcat(folders.raw, filesep,sess,'-camB-trial',num2str(i),resnet,'.csv');
        tmp_camB=csvread(tmp_camB_csv,3,1);
        camB(1:size(tmp_camB,1),:,i) = tmp_camB;
        camB_in_row=cat(1,camB_in_row,tmp_camB);
        % cam C
        tmp_camC_csv = strcat(folders.raw, filesep,sess,'-camC-trial',num2str(i),resnet,'.csv');
        tmp_camC=csvread(tmp_camC_csv,3,1);
        camC(1:size(tmp_camC,1),:,i) = tmp_camC;
        camC_in_row=cat(1,camC_in_row,tmp_camC);
        disp(strcat('trial',num2str(i)))
    end
    disp('Done!')
    toc

    %
    % Arrange data - organize in x,y,z by feature (paws and water)
    % RIGHT PAW
    pawR_order = 4;
    pawR_start = pawR_order*3-2;
    % x
    tpawR_A = camA(:,pawR_start:pawR_start+1,:);
    lik_pawR_A = repmat(camA(:,pawR_start+2,:),[1, 2, 1]);
    %pawR_A_flip_w = abs(tpawR_A(:,1,:)-width-1); %  flip if videos aren't fliped
    pawR_A_flip_h = abs(tpawR_A(:,2,:)-height-1);
    pawR_A=cat(2,tpawR_A(:,1,:),pawR_A_flip_h);
    pawR_A(lik_pawR_A<likelihood_threshold) = nan;
    % y, z
    tpawR_B = camB(:,pawR_start:pawR_start+1,:);
    lik_pawR_B = repmat(camB(:,pawR_start+2,:),[1, 2, 1]);
    pawR_B_flip_h = abs(tpawR_B(:,2,:)-height-1);
    pawR_B=cat(2,tpawR_B(:,1,:),pawR_B_flip_h);
    pawR_B(lik_pawR_B<likelihood_threshold) = nan;
    % x, y, z
    pawR = cat(2,pawR_A(:,1,:),pawR_B(:,1,:),pawR_A(:,2,:));
    pawR_in_row = cat(2,camA_in_row(:,pawR_start),camB_in_row(:,pawR_start),abs(camA_in_row(:,pawR_start+1)-height-1));

    % LEFT PAW
    pawL_order = 8;
    pawL_start = pawL_order*3-2;
    % x
    tpawL_C = camC(:,pawL_start:pawL_start+1,:);
    lik_pawL_C = repmat(camC(:,pawL_start+2,:),[1, 2, 1]);
    pawR_C_flip_w = abs(tpawL_C(:,1,:)-width-1) - offset_c2a; %  flip if videos aren't fliped, correct offset
    pawL_C_flip_h = abs(tpawL_C(:,2,:)-height-1) - offset_c2a_z;
    pawL_C = cat(2,pawR_C_flip_w,pawL_C_flip_h);
    pawL_C(lik_pawL_C<likelihood_threshold) = nan;
    % y, z
    tpawL_B = camB(:,pawL_start:pawL_start+1,:);
    lik_pawL_B = repmat(camB(:,pawL_start+2,:),[1, 2, 1]);
    pawL_B_flip_h = abs(tpawL_B(:,2,:)-height-1);
    pawL_B=cat(2,tpawL_B(:,1,:),pawL_B_flip_h);
    pawL_B(lik_pawL_B<likelihood_threshold) = nan;
    % x, y, z.
    pawL = cat(2,pawL_C(:,1,:),pawL_B(:,:,:));
    pawL_in_row = cat(2,abs(camC_in_row(:,pawL_start)-width-1)-offset_c2a_z,...
        camB_in_row(:,pawL_start),...
        abs(camC_in_row(:,pawL_start+1)-height-1)-offset_c2a);

    % WATER
    water_order = 11;
    water_start = water_order*3-2;
    % x . A
    twater_A = camA(:,water_start:water_start+1,:);
    lik_water_A = repmat(camA(:,water_start+2,:),[1, 2, 1]);
    %water_A_flip_w = abs(twater_A(:,1,:)-width-1); %  flip if videos aren't fliped
    water_A_flip_h = abs(twater_A(:,2,:)-height-1);
    water_A=cat(2,twater_A(:,1,:),water_A_flip_h);
    water_A(lik_water_A<likelihood_threshold) = nan;
    % x . C
    twater_C = camC(:,water_start:water_start+1,:);
    lik_water_C = repmat(camC(water_start+2,:),[1, 2, 1]);
    water_C_flip_w = abs(twater_C(:,1,:)-width-1) - offset_c2a; %  flip if videos aren't fliped, correct offset
    water_C_flip_h = abs(twater_C(:,2,:)-height-1) - offset_c2a_z;
    water_C=cat(2,water_C_flip_w,water_C_flip_h);
    water_C(lik_water_C<likelihood_threshold) = nan;
    % y, z
    twater_B = camB(:,water_start:water_start+1,:);
    lik_water_B = repmat(camB(:,water_start+2,:),[1, 2, 1]);
    water_B_flip_h = abs(twater_B(:,2,:)-height-1);
    water_B=cat(2,twater_B(:,1,:),water_B_flip_h);
    water_B(lik_water_B<likelihood_threshold) = nan;
    % x, y, z
    %if strcmp(paw_pref,'R')
    water = cat(2,water_A(:,1,:),water_B(:,1,:),water_A(:,2,:));
    %else
    %    water = cat(2,water_C(:,1,:),water_B(:,:,:),water_C(:,2,:));
    %end

    % Convert in mm / Choose dominat paw
    % Right paw
    pawR_mm = pawR;
    pawR_mm(:,1,:)=pawR(:,1,:).*px2mm_xz;
    pawR_mm(:,2,:)=pawR(:,2,:).*px2mm_y;
    pawR_mm(:,3,:)=pawR(:,3,:).*px2mm_xz;
    % Left paw
    pawL_mm = pawL;
    pawL_mm(:,1,:)=pawL(:,1,:).*px2mm_xz;
    pawL_mm(:,2,:)=pawL(:,2,:).*px2mm_y;
    pawL_mm(:,3,:)=pawL(:,3,:).*px2mm_xz;
    % water
    water_mm = water;
    water_mm(:,1,:)=water(:,1,:).*px2mm_xz;
    water_mm(:,2,:)=water(:,2,:).*px2mm_y;
    water_mm(:,3,:)=water(:,3,:).*px2mm_xz;

    % dominat paw
    if strcmp(paw_pref,'R')
        dom_paw_mm = pawR_mm;
        dom_paw = pawR;
        dom_paw_in_row = pawR_in_row;
        nondom_paw_mm = pawL_mm;
        nondom_paw = pawL;
        nondom_paw_in_row = pawL_in_row;
    else
        dom_paw_mm = pawL_mm;
        dom_paw = pawL;
        dom_paw_in_row = pawL_in_row;
        nondom_paw_mm = pawR_mm;
        nondom_paw = pawR;
        nondom_paw_in_row = pawR_in_row;
    end

    % Save
    mkdir(char(folders.mat))
    save(strcat(char(folders.mat),filesep,'session_raw_data_paw',paw_pref,'.mat'),...
        'folders','resnet', 'paw_pref', ...
        'width','height','likelihood_threshold','frame_rate','T','px2mm_xz','px2mm_y','offset_c2a','n_max_points', ...
        'csvs', 'n_trials', 'siz', 'max_siz', 'camA', 'camB', 'camC',...
        'camA_in_row', 'camB_in_row', 'camC_in_row',...
        'pawR_A','pawR_B','pawL_B','pawL_C','water_A','water_B','water_C',...
        'pawR','pawL','water','pawR_mm','pawL_mm','water_mm','time',...
        'pawR_order','pawL_order','water_order',...
        'dom_paw_mm','dom_paw','nondom_paw_mm','nondom_paw','nondom_paw_in_row','dom_paw_in_row',...
        '-v7.3');

    % Show plots
    mkdir(char(folders.out))

    if show_plot
        tt=50; % example trial
        figure%(1)
        subplot(311)
        plot(pawR(:,1,tt)); hold on
        plot(water(:,1,tt),'k'); hold off
        xlabel('time (frames)'), ylabel('x');
        title('Right paw')
        subplot(312)
        plot(pawR(:,2,tt)); hold on
        plot(water(:,2,tt),'k'); hold off
        xlabel('time (frames)'), ylabel('y');
        subplot(313)
        plot(pawR(:,3,tt)); hold on
        % plot(pawR_A(:,2,tt));
        plot(water(:,3,tt),'k');
        plot(water_A(:,2,tt),'k'); hold off
        xlabel('time (frames)'), ylabel('z');
        if save_fig_flag, saveas(gcf,strcat(folders.out_preProc,filesep,'raw_pawR_trial',num2str(tt),'.png'),'png'); end
        clrs = get(gca,'colorOrder');

        figure%(2)
        subplot(311)
        plot(pawL(:,1,tt)); hold on
        plot(water(:,1,tt),'k'); hold off
        xlabel('time (frames)'), ylabel('x');
        title('Left paw')
        subplot(312)
        plot(pawL(:,2,tt)); hold on
        plot(water(:,2,tt),'k'); hold off
        xlabel('time (frames)'), ylabel('y');
        subplot(313)
        plot(pawL(:,3,tt)); hold on
        %        plot(pawL_C(:,2,tt));
        plot(water_C(:,2,tt), 'y'); 
        plot(water(:,3,tt),'k');
        hold off
        xlabel('time (frames)'), ylabel('z');
        if save_fig_flag, saveas(gcf, strcat(folders.out_preProc,filesep,'raw_pawL_trial',num2str(tt),'.png'),'png'); end

        figure%(3)
        subplot(311)
        plot(water_A(:,1,tt)); hold on
        plot(water_C(:,1,tt));
        plot(water(:,1,tt)); 
        legend('camA','camC','camSelec');
        xlabel('time (frames)'), ylabel('x');
        title('water')
        subplot(312)
        plot(water(:,2,tt),'k');
        legend('camB')
        xlabel('time (frames)'), ylabel('y');
        subplot(313)
        plot(water_B(:,2,tt),'k'); hold on
        plot(water_A(:,2,tt));
        plot(water_C(:,2,tt)); hold off
        legend('camB','camA','camC')
        xlabel('time (frames)'), ylabel('z');
        if save_fig_flag, saveas(gcf, strcat(folders.out_preProc,filesep,'raw_water_trial_MirrorsDiff',num2str(tt),'.png'),'png'); end
    end


else
    load(strcat(char(folders.mat),filesep,'session_raw_data_paw',paw_pref,'.mat'),...
        'paw_pref','width','height','frame_rate','T','px2mm_xz','px2mm_y','offset_c2a', ...
        'n_trials','dom_paw','dom_paw_mm','nondom_paw','nondom_paw_mm',...
        'water','water_mm','siz','n_max_points','resnet'...
        )
    disp('loaded tracked features data')

end

%% PRE-PROCESSING: CLEAN AND INTERPOLATED DATA, (POSITION, SPEED, FREQUENCY DOMAIN)
% TO DO!!!! REPLACE BY KALMAN FILTER
% parameters for outliers removal
mov_win = 10;
thres_jmp = 80;
maxY_R = 350;
maxY_L = 150;

% Allocate space
ppDom_paw = nan(size(dom_paw));
ppNonDom_paw = nan(size(nondom_paw));
% all session in a row mat
siz_sess = sum(siz);
ppDom_paw_sess = [];
ppNonDom_paw_sess = [];
ppDom_paw_sess_from_init = [];

% Go thorugh trials, clean amd interpolate
for tt = 1:n_trials
    warning('off','all')

    ff = 1:siz(tt);
    % Dom paw
    Xdom_t = squeeze(dom_paw(1:siz(tt),1,tt));
    Ydom_t = squeeze(dom_paw(1:siz(tt),2,tt));
    Zdom_t = squeeze(dom_paw(1:siz(tt),3,tt));
    % remove unreal locations (Y)
    if strcmp(paw_pref,'R')
        Ydom_t(Ydom_t>maxY_R)=nan;
    elseif strcmp(paw_pref,'L')
        Ydom_t(Ydom_t<maxY_L)=nan;
    end
    % interpolate and remove jumps
    ppDom_paw(1:siz(tt),1,tt) = pchip(ff,filloutliers(...
        remove_DLCjumps(Xdom_t,thres_jmp,0),...
        'pchip','movmedian',mov_win),ff);
    ppDom_paw(1:siz(tt),2,tt) = pchip(ff,filloutliers(...
        remove_DLCjumps(Ydom_t,thres_jmp,0),...
        'pchip','movmedian',mov_win),ff);
    ppDom_paw(1:siz(tt),3,tt) = pchip(ff,filloutliers(...
        remove_DLCjumps(Zdom_t,thres_jmp,0),...
        'pchip','movmedian',mov_win),ff);
    % Join every session in a row
    ppDom_paw_sess = cat(1,ppDom_paw_sess,...
        squeeze(ppDom_paw(1:siz(tt),:,tt)));

    % Join every session in a row from trial 2 (ignore the preparation time)
    if tt>1
        ppDom_paw_sess_from_init = cat(1,ppDom_paw_sess_from_init,...
            squeeze(ppDom_paw(1:siz(tt),:,tt)));
    end

    % non-Dom paw
    Xnondom_t = squeeze(nondom_paw(1:siz(tt),1,tt));
    Ynondom_t = squeeze(nondom_paw(1:siz(tt),2,tt));
    Znondom_t = squeeze(nondom_paw(1:siz(tt),3,tt));
    % remove unreal locations (Y)
    if strcmp(paw_pref,'L')
        Ynondom_t(Ynondom_t>maxY_R)=nan;
    elseif strcmp(paw_pref,'R')
        Ynondom_t(Ynondom_t<maxY_L)=nan;
    end
    % interpolate and remove jumps
    ppNonDom_paw(1:siz(tt),1,tt) = pchip(ff,filloutliers(...
        remove_DLCjumps(Xnondom_t,thres_jmp,0),...
        'pchip','movmedian',mov_win),ff);
    ppNonDom_paw(1:siz(tt),2,tt) = pchip(ff,filloutliers(...
        remove_DLCjumps(Ynondom_t,thres_jmp,0),...
        'pchip','movmedian',mov_win),ff);
    ppNonDom_paw(1:siz(tt),3,tt) = pchip(ff,filloutliers(...
        remove_DLCjumps(Znondom_t,thres_jmp,0),...
        'pchip','movmedian',mov_win),ff);
    % Join every session in a row
    ppNonDom_paw_sess = cat(1,ppNonDom_paw_sess,...
        squeeze(ppNonDom_paw(1:siz(tt),:,tt)));

    warning('on','all')
end

%%
% ........................................
% SMOOTHED DERIVATIVE OF POSITION : SPEED, ACROSS SESSION
% S-Golay params
% ATTENTION: combining the partial speeds only makes sense after converting
% to mm, when the distortion from mirror/cam views are already corrected.
% Otherwise, the speed in the different dimensions will not weight the same
N_v = 1;
K = 3;
F = 11;
speed_DomPaw_sess = nan(size(ppDom_paw_sess));
for dim = 1:3
    x = squeeze(ppDom_paw_sess(:,dim));
    speed_DomPaw_sess(:,dim) = applySGolayDerivationFilter(x, N_v, K, F);
end

% Split partial speed vec into trials
speed_DomPaw = nan(size(ppDom_paw));
% loop across trials
for i = 1:n_trials
    if i==1
        speed_DomPaw(1:siz(i),:,i) = speed_DomPaw_sess(1:siz(i),:,i);
    else
        speed_DomPaw(1:siz(i),:,i) = speed_DomPaw_sess(sum(siz(1:(i-1)))+1:sum(siz(1:i)),:);
    end
end

% ................
% Frequency spectrum of full session in a row
% Check frequency of whole session
% Dominant paw
[f,P1x,tm] = fft_analysis_vec(ppDom_paw_sess(:,1),frame_rate);
[~,P1y,~] = fft_analysis_vec(ppDom_paw_sess(:,2),frame_rate);
[~,P1z,~] = fft_analysis_vec(ppDom_paw_sess(:,3),frame_rate);

% non-Dominant paw
[~,nP1x,~] = fft_analysis_vec(ppNonDom_paw_sess(:,1),frame_rate);
[~,nP1y,~] = fft_analysis_vec(ppNonDom_paw_sess(:,2),frame_rate);
[~,nP1z,~] = fft_analysis_vec(ppNonDom_paw_sess(:,3),frame_rate);

% ............................
% speed and distance travelled from 3D
dt = tm(2)-tm(1);
[dist_trav_3D,speed_3D_DomPaw] = distance_travelled_and_speed(speed_DomPaw,dt,[px2mm_xz px2mm_y px2mm_xz]);



%% WHOLE SESSION FIGURE
fig_sess_prop = figure(figOpt{:});
clrs = get(gca,'ColorOrder');
subplot(331)
plot(tm,ppNonDom_paw_sess(:,1),'color',clrs(2,:)); hold on
plot(tm,ppDom_paw_sess(:,1),'color',clrs(1,:)); hold off
title('Position over session - X(t)')
xlabel('time (sec)'); ylabel('x (px)')
set(gca,axeOpt{:})
subplot(332)
plot(tm,ppNonDom_paw_sess(:,2),'color',clrs(2,:)); hold on
plot(tm,ppDom_paw_sess(:,2),'color',clrs(1,:)); hold off
title('Position over session - Y(t)')
xlabel('time (sec)'); ylabel('y (px)')
set(gca,axeOpt{:})
subplot(333)
plot(tm,ppNonDom_paw_sess(:,3),'color',clrs(2,:)); hold on
plot(tm,ppDom_paw_sess(:,3),'color',clrs(1,:)); hold off
title('Position over session - Z(t)')
xlabel('time (sec)'); ylabel('z (px)')
set(gca,axeOpt{:})

subplot(334)
plot(speed_DomPaw_sess(:,1))
title('Speed of X over session');
xlabel('frames in session'); ylabel('dx (px)');
set(gca,axeOpt{:})
subplot(335)
plot(speed_DomPaw_sess(:,2));
xlabel('frames in session'); ylabel('dy (px)');
title('Speed of Y over session');
set(gca,axeOpt{:})
subplot(336)
plot(speed_DomPaw_sess(:,3));
xlabel('frames in session'); ylabel('dz (px)');
title('Speed of Z over session');
set(gca,axeOpt{:})

subplot(337)
plot(f,pow2db(nP1x),'color',clrs(2,:)); hold on
plot(f,pow2db(P1x),'color',clrs(1,:)); hold off
title('Single-Sided Amplitude Spectrum of X(t)')
xlabel('f (Hz)'); ylabel('|P1(f)|')
set(gca,axeOpt{:})
%xlim([-0.5 5]); ylim([0 50])
subplot(338),
plot(f,pow2db(nP1y),'color',clrs(2,:)); hold on
plot(f,pow2db(P1y),'color',clrs(1,:)); hold off
title('Single-Sided Amplitude Spectrum of Y(t)')
xlabel('f (Hz)'); ylabel('|P1(f)|')
set(gca,axeOpt{:})
%xlim([-0.5 5]); ylim([0 50])
subplot(339)
plot(f,pow2db(nP1z),'color',clrs(2,:)); hold on
plot(f,pow2db(P1z),'color',clrs(1,:)); hold off
title('Single-Sided Amplitude Spectrum of Z(t)')
xlabel('f (Hz)'); ylabel('|P1(f)|')
%xlim([-0.5 5]); ylim([0 50])
set(gca,axeOpt{:})
legend('non-dominant paw',strcat('dominant paw (',paw_pref,')'),'box','off')
set(fig_sess_prop, 'Position', [2195 173 1388 772])

saveas(fig_sess_prop,strcat(folders.out,filesep,'all_session_XYZ.png'),'png');



%%  GO TRIAL BY TRIAL, FIND REACHES
warning('off','all')
close all

% Allocate space and variables
% Trial variables
nreaches_each_trial=zeros(n_trials,1); % n_reaches
trial_first_attempt=zeros(n_trials,1); %  first attempt
last_frame_wWater = zeros(n_trials,1);
time_to_hit = nan(n_trials,1);

% Params for find peaks (pk height defined by proximity to water)
% water position
water_x=water(:,1,:);
med_watx = nanmedian(water_x(:));
% Findpeaks params
if strcmp(paw_pref,'L')
    prec_close_water = 0.84;
else
    prec_close_water = 0.84;
end
pkheight = floor(prec_close_water*med_watx); %288; % 299; %299
pkdist= 55; % 60;
pkprominence=40 ; %25

% Find peaks across session to find IRI (interreach interval)
[pks_sess, pks_frames] = findpeaks(ppDom_paw_sess_from_init(:,1),'MinPeakHeight',...
    pkheight,'MinPeakDistance',pkdist,'MinPeakProminence',pkprominence,...
    'Annotate','extents');

% parameters for defining if water was available (purposeful reaches)
extra_frames=10;
nan_min = 40;

% REACH PARAMETERS
% parameters of reach interval
reach_goBack_frames=150;
reach_goFront_frames=50;
max_reach=reach_goBack_frames+1;


% reach variables initialization
r_num=0;
reach_trial = [];
reach_range_mat = [];
reach_timestamps_mat = [];
reach_mat = [];
reach_otherPaw_mat = [];
water_reach_mat = [];
reach_speed_mat = [];
P1_mat = [];
cov_r_mat = [];
lags_r_mat = [];
covTot_mat = [];

start_forw = [];
onset_stop_mat = [];
no_turn_from_forw_mat = [];
dur_forw_mat = [];
dist_trav_forw_mat= [];
displacement_forw_mat = [];
tortuosity_forw_mat = [];
start_stopX = [];
forward_equal_startinX_mat = [];
dur_fromStop_mat = [];
dist_trav_fStop_mat = [];
displacement_fStop_mat = [];
tortuosity_fStop_mat = [];

start_realStop = [];
onset_REALstop_mat = [];
startinX_equal_start_mat = [];
dur_fromREALstop_mat = [];
dist_trav_fREALstop_mat= [];
displacement_fREALstop_mat = [];
tortuosity_fREALstop_mat = [];

cat_reach = [];
start_forward_mov_resting_mat = [];
start_from_stop_resting_mat = [];
purpose_reach = [];
hit_reach = [];
success_reach = [];
nonDomPaw_resting = [];
hit_later_than_detection = nan(n_trials,1);

% Synccing vairables
frames_timestamps = nan(n_trials,max(siz));
timestamp_delivered = nan(n_trials,1);
timestamp_reached = nan(n_trials,1);
timestamp_iti_start = nan(n_trials,1);
timestamp_iti_end = nan(n_trials,1);

water_delivered_frame = nan(n_trials,1);
water_reached_frame = nan(n_trials,1);
iti_start_frame = nan(n_trials,1);
iti_end_frame = nan(n_trials,1);

is_push_trial = nan(n_trials,1);
water_location_trial =  nan(n_trials,1);

invalid_push_intrial = nan(n_trials,20);
invalid_pull_intrial = nan(n_trials,20);
invalid_push_frame = nan(n_trials,20);
invalid_pull_frame = nan(n_trials,20);
len_inval_push = nan(n_trials,1);
len_inval_pull = nan(n_trials,1);

invalid_push_timestamps_all = behavior.inputs.read_log(behavior.logs.inval_push_ind);
invalid_pull_timestamps_all = behavior.inputs.read_log(behavior.logs.inval_pull_ind);

clr_push = behavior.colors.push_clr;
clr_pull = behavior.colors.pull_clr;
clr_right = behavior.colors.right_color;
clr_center = behavior.colors.center_color;
clr_left = behavior.colors.left_color;
clr_iti = [.8 .8 .8];
clr_inval = [.5 .5 .5];

% ------------------------------------------------------------------
% TRIAL LOOP
disp('Finding reaches...')

%tt=2
for tt = 1:n_trials
    disp(strcat('trial ',num2str(tt)))

    real_tt = tt-1;

    % SYNCCING  -----------------------------------------------
    sync_from_log_all = [behavior.sync.time_newTrial_log;behavior.inputs.real_log_all(end,1)];
    f=fit([1;siz(tt)],sync_from_log_all(tt:tt+1),'poly1');
    frames_timestamps_tmp = f.p2+f.p1*[1:siz(tt)];
    frames_timestamps(tt,1:siz(tt)) =  frames_timestamps_tmp;

    if (tt>1 && real_tt <= behavior.nr_trials)

        is_push_trial(tt) = behavior.init.is_push(real_tt);
        if is_push_trial(tt) == 1
            which_pp = 'push';
        elseif is_push_trial(tt) == 0
            which_pp = 'pull';
        else
            which_pp = ' ';
        end

        if ismember(real_tt,behavior.reach.left_idx)
            water_location_trial(tt) = 1;
            where_is_water = 'left';
        elseif ismember(real_tt,behavior.reach.center_idx)
            water_location_trial(tt) = 2;
            where_is_water = 'center';
        elseif ismember(real_tt,behavior.reach.right_idx)
            water_location_trial(tt) = 3;
            where_is_water = 'right';
        else
            water_location_trial(tt) = nan;
            where_is_water = ' ';
        end

        timestamp_delivered(tt) = behavior.inputs.read_log(behavior.logs.trial_init_ind(real_tt)+1,1);
        if timestamp_delivered(tt) > frames_timestamps_tmp(1) && timestamp_delivered(tt) < frames_timestamps_tmp(end)
            [~,water_delivered_frame(tt)] = min(abs(frames_timestamps_tmp - timestamp_delivered(tt)));
        end
        timestamp_reached(tt) = behavior.inputs.read_log(behavior.logs.reached_ind(real_tt),1);
        if timestamp_reached(tt) > frames_timestamps_tmp(1) && timestamp_reached(tt) < frames_timestamps_tmp(end)
            [~,water_reached_frame(tt)] = min(abs(frames_timestamps_tmp - timestamp_reached(tt)));
        end
        timestamp_iti_start(tt) = behavior.inputs.read_log(behavior.logs.ITIs_start_ind(real_tt),1);
        if timestamp_iti_start(tt) > frames_timestamps_tmp(1) && timestamp_iti_start(tt) < frames_timestamps_tmp(end)
            [~,iti_start_frame(tt)] = min(abs(frames_timestamps_tmp - timestamp_iti_start(tt)));
        end
        timestamp_iti_end(tt) = behavior.inputs.read_log(behavior.logs.trial_available_all_ind(real_tt+1),1);
        if timestamp_iti_end(tt) > frames_timestamps_tmp(1) && timestamp_iti_end(tt) < frames_timestamps_tmp(end)
            [~,iti_end_frame(tt)] = min(abs(frames_timestamps_tmp - timestamp_iti_end(tt)));
        end
    end

    tt_invalid_push = invalid_push_timestamps_all(invalid_push_timestamps_all>min(frames_timestamps(tt,:))...
        & invalid_push_timestamps_all<max(frames_timestamps(tt,:)));
    len_inval_push(tt) = length(tt_invalid_push);
    if ~isempty(tt_invalid_push)
        invalid_push_intrial(tt,1:length(tt_invalid_push)) = tt_invalid_push;
        for ii = 1:len_inval_push(tt)
            [~,invalid_push_frame(tt,ii)] = min(abs(tt_invalid_push(ii)-frames_timestamps(tt,:)));
        end
    end

    tt_invalid_pull = invalid_pull_timestamps_all(invalid_pull_timestamps_all>min(frames_timestamps(tt,:))...
        & invalid_pull_timestamps_all<max(frames_timestamps(tt,:)));
    len_inval_pull(tt) = length(tt_invalid_pull);
    if ~isempty(tt_invalid_pull)
        invalid_pull_intrial(tt,1:length(tt_invalid_pull)) = tt_invalid_pull;
        for ii = 1:len_inval_pull(tt)
            [~,invalid_pull_frame(tt,ii)] = min(abs(tt_invalid_pull(ii)-frames_timestamps(tt,:)));
        end
    end

    % Colors for trial action 1 and 2
    if is_push_trial(tt)==0, clr_pp = clr_pull;
    elseif is_push_trial(tt)==1, clr_pp = clr_push;
    else, clr_pp=[.8,.8,.8];
    end

    if water_location_trial(tt)==1, clr_rr = clr_left;
    elseif water_location_trial(tt)==2, clr_rr = clr_center;
    elseif water_location_trial(tt)==3, clr_rr = clr_right;
    else, clr_rr = [.8,.8,.8];
    end


    % WATER ------------- (consider improving at some point)
    % water availability
    water_appeared = water_delivered_frame(tt)+nan_min;
    if isnan(water_appeared)
        water_appeared = nan_min*2;
    end
    t_water_x = water(1:siz(tt),1,tt);
    cumsum_nan = cumsum([zeros(water_appeared,1);isnan(t_water_x(water_appeared:end))]);

    if max(cumsum_nan) == numel(cumsum_nan) % only nans
        last_water = 1;
    elseif max(cumsum_nan)<nan_min
        last_water = find(cumsum_nan==max(cumsum_nan),1);
    else
        last_water = find(cumsum_nan>=nan_min,1);
    end
    purpose_length=1:(last_water+extra_frames);
    water_length=1:last_water;
    last_frame_wWater(tt,1)=last_water+extra_frames;
    time_to_hit(tt,1)=numel(water_length)/frame_rate;
    %figure, plot(cumsum_nan)
    % ---------------------------

    % DOMINANT PAW ----------------------------
    % trial paw position
    t_domPaw = ppDom_paw(1:siz(tt),:,tt);
    t_domPaw_x = squeeze(t_domPaw(:,1));
    % trial paw speed
    t_speed_domPaw = speed_DomPaw(1:siz(tt),:,tt);
    t_speed_domPaw_x = squeeze(t_speed_domPaw(:,1));

    % FIND PEAKS
    % findpeaks params adjustment to trials
    if pkdist>=siz(tt)
        pkdist=siz(tt)-2;
    end
    % find peaks
    [xmax, xmax_frame,w,p] = findpeaks(t_domPaw_x,'MinPeakHeight',...
        pkheight,'MinPeakDistance',pkdist,'MinPeakProminence',pkprominence);

    if show_plot
        figure
        subplot(211)
        findpeaks(t_domPaw_x,'MinPeakHeight',...
            pkheight,'MinPeakDistance',pkdist,'MinPeakProminence',pkprominence,...
            'Annotate','extents');
        legend off
        hold on;
        plot(t_water_x,'k');
        plot(purpose_length,ones(1,numel(purpose_length)).*pkheight,'--k');
        tick_pp = 360;
        tick_rr = 360;
        plot(water_delivered_frame(tt),tick_pp,'|','color',clr_pp,'linewidth',3,'MarkerSize',6);
        plot(water_reached_frame(tt),tick_rr,'|','color',clr_rr,'linewidth',3,'MarkerSize',6);
        plot(iti_start_frame(tt):iti_end_frame(tt),ones(length(iti_start_frame(tt):iti_end_frame(tt)))*tick_rr,'color',clr_iti);
        plot(invalid_pull_frame(tt,:),tick_pp,'|', 'color',clr_inval, 'linewidth', 2,'MarkerSize',6)
        plot(invalid_push_frame(tt,:),tick_pp,'|', 'color',clr_inval,'linewidth', 2,'MarkerSize',6)
        %plot(trial_nondomPaw_x(trial_length))
        %xline(xmax_frame); hold off
        xlim([0 siz(tt)]); ylim([80, 380]);
        title('position'); ylabel('x (px)'); xlabel('frames')
        set(gca,axeOpt{:})

        subplot(212)
        plot(t_speed_domPaw_x); hold on
        plot(xmax_frame,t_speed_domPaw_x(xmax_frame),'*','markersize',2,'linewidth',5)
        %xline(xmax_frame); hold off
        xlim([0 siz(tt)]); grid on
        title('speed'); ylabel('x (px/frame)'); xlabel('frames')
        set(gca,axeOpt{:})
        set(gcf, 'Position', [2182 251 1318 700])
        if save_fig_flag, saveas(gcf,strcat(folders.out,filesep,'preProc',filesep,'detect_reaches_trial',num2str(tt),'.png'),'png'); end
    end


    % Trial params
    % n reaches
    nreaches_trial = numel(xmax);
    % first attempt?
    if nreaches_trial == 0
        isfirst_attempt = nan;
    elseif (nreaches_trial == 1 || xmax_frame(2)>purpose_length(end))
        isfirst_attempt = 1;
    else
        isfirst_attempt = 0;
    end
    trial_first_attempt(tt,1) = isfirst_attempt;
    nreaches_each_trial(tt,1) = nreaches_trial;

    %% LOOP OF REACHES
    close all


    if nreaches_trial == 0
        disp(strcat('no reaches in trial',num2str(tt)))
    else
        for r_ind = 1:nreaches_trial
            %r_ind=4
            % reach max rame
            rr=xmax_frame(r_ind);
            nn_max_points_tt = siz(tt);

            % grab frames from previous trial if reach was right at the beggiging of current trial
            if rr<=reach_goBack_frames
                last_frame_prev_tt1 = siz(tt-1);
                if last_frame_prev_tt1<reach_goBack_frames-rr
                    last_frame_prev_tt2 = siz(tt-2);
                    last_trials=cat(1,ppDom_paw(1:last_frame_prev_tt2,:,tt-2),ppDom_paw(1:last_frame_prev_tt1,:,tt-1));
                    last_trials_speed=cat(1,speed_DomPaw(1:last_frame_prev_tt2,:,tt-2),speed_DomPaw(1:last_frame_prev_tt1,:,tt-1));
                    last_trials_othrPaw=cat(1,ppNonDom_paw(1:last_frame_prev_tt2,:,tt-2),ppNonDom_paw(1:last_frame_prev_tt1,:,tt-1));
                    last_trials_water=cat(1,water(1:last_frame_prev_tt2,:,tt-2),water(1:last_frame_prev_tt1,:,tt-1));
                    last_trials_timestamps=cat(1,frames_timestamps(tt-2,1:last_frame_prev_tt2),frames_timestamps(tt-1,1:last_frame_prev_tt1));
                else
                    last_trials=ppDom_paw(1:last_frame_prev_tt1,:,tt-1);
                    last_trials_speed=speed_DomPaw(1:last_frame_prev_tt1,:,tt-1);
                    last_trials_othrPaw=ppNonDom_paw(1:last_frame_prev_tt1,:,tt-1);
                    last_trials_water=water(1:last_frame_prev_tt1,:,tt-1);
                    last_trials_timestamps=frames_timestamps(tt-1,1:last_frame_prev_tt1);
                end
                last_siz=size(last_trials_water,1);
                reach_prev = last_siz-(reach_goBack_frames-rr):last_siz;
                reach_curr = 1:rr+reach_goFront_frames;
                reach_range=nan(1,reach_goBack_frames+reach_goFront_frames+1);
                reach_range(reach_goBack_frames-rr+2:end)=reach_curr;
                reach=cat(1,squeeze(last_trials(reach_prev,:)),squeeze(ppDom_paw(reach_curr,:,tt)));
                reach_speed=cat(1,squeeze(last_trials_speed(reach_prev,:)),squeeze(speed_DomPaw(reach_curr,:,tt)));
                reach_otherPaw=cat(1,squeeze(last_trials_othrPaw(reach_prev,:)),squeeze(ppNonDom_paw(reach_curr,:,tt)));
                water_reach=cat(1,squeeze(last_trials_water(reach_prev,:)),squeeze(water(reach_curr,:,tt)));
                reach_timestamps=cat(2,squeeze(last_trials_timestamps(reach_prev)),squeeze(frames_timestamps(tt,reach_curr)));

            elseif nn_max_points_tt-rr<reach_goFront_frames
                reach_curr = rr-reach_goBack_frames:nn_max_points_tt;
                reach_nex = 1:reach_goFront_frames-(nn_max_points_tt-rr);
                reach_range=nan(1,reach_goBack_frames+reach_goFront_frames+1);
                reach_range(1:numel(reach_curr))=reach_curr;
                reach_range(numel(reach_curr)+1:end)=reach_nex;
                reach=cat(1,squeeze(ppDom_paw(reach_curr,:,tt)),squeeze(ppDom_paw(reach_nex,:,tt+1)));
                reach_speed=cat(1,squeeze(speed_DomPaw(reach_curr,:,tt)),squeeze(speed_DomPaw(reach_nex,:,tt+1)));
                reach_otherPaw=cat(1,squeeze(ppNonDom_paw(reach_curr,:,tt)),squeeze(ppNonDom_paw(reach_nex,:,tt+1)));
                water_reach=cat(1,squeeze(water(reach_curr,:,tt)),squeeze(water(reach_nex,:,tt+1)));
                reach_timestamps=cat(2,squeeze(frames_timestamps(tt,reach_curr)),squeeze(ppDom_paw(tt+1,reach_nex)));
            else
                reach_range=rr-reach_goBack_frames:rr+reach_goFront_frames;
                reach_curr = reach_range;
                reach=squeeze(ppDom_paw(reach_range,:,tt));
                reach_speed=squeeze(speed_DomPaw(reach_range,:,tt));
                reach_otherPaw=squeeze(ppNonDom_paw(reach_range,:,tt));
                water_reach=squeeze(water(reach_range,:,tt));
                reach_timestamps=squeeze(frames_timestamps(tt,reach_range));
            end

            if show_plot
                tms = frames_timestamps(tt,1:siz(tt));
                figure
                subplot(211)
                plot(t_domPaw_x,'color', [.5 .5 .5]); hold on
                plot(ppNonDom_paw(1:siz(tt),1,tt),'color',[.8 .8 .8]);
                plot(t_water_x,'color','k');
                hold on
                plot(reach_curr,reach(1:numel(reach_curr),1),'color',clrs(1,:),'linewidth',1.5);
                plot(reach_curr,reach_otherPaw(1:numel(reach_curr),1),'color',clrs(2,:),'linewidth',1.5);
                plot(xmax_frame,xmax,'*','LineWidth',1,'color',clrs(3,:))
                %plot(purpose_length,ones(1,numel(purpose_length)).*pkheight,'--k');
                tick_pp = 360;
                tick_rr = 360;
                plot(water_delivered_frame(tt),tick_pp,'|','color',clr_pp,'linewidth',3,'MarkerSize',6);
                plot(water_reached_frame(tt),tick_rr,'|','color',clr_rr,'linewidth',3,'MarkerSize',6);
                plot(iti_start_frame(tt):iti_end_frame(tt),ones(length(iti_start_frame(tt):iti_end_frame(tt)))*tick_rr,'color',clr_iti);
                plot(invalid_pull_frame(tt,:),tick_pp,'|', 'color',clr_inval, 'linewidth', 2,'MarkerSize',6)
                plot(invalid_push_frame(tt,:),tick_pp,'|', 'color',clr_inval,'linewidth', 2,'MarkerSize',6)
                set(gca,axeOpt{:})
                xlabel('frames in trial'); ylabel('x (px)')
                title('Reach position in trial: in frames')


                subplot(212)
                plot(tms,t_domPaw_x,'color', [.5 .5 .5]); hold on
                plot(tms,ppNonDom_paw(1:siz(tt),1,tt),'color',[.8 .8 .8]);
                plot(tms,t_water_x,'color','k');
                hold on
                plot(reach_timestamps(1:numel(reach_curr)),reach(1:numel(reach_curr),1),'color',clrs(1,:),'linewidth',1.5);
                plot(reach_timestamps(1:numel(reach_curr)),reach_otherPaw(1:numel(reach_curr),1),'color',clrs(2,:),'linewidth',1.5);
                plot(frames_timestamps(tt,xmax_frame),xmax,'*','LineWidth',1,'color',clrs(3,:))
                %plot(purpose_length,ones(1,numel(purpose_length)).*pkheight,'--k');
                tick_pp = 360;
                tick_rr = 360;
                plot(timestamp_delivered(tt),tick_pp,'|','color',clr_pp,'linewidth',3,'MarkerSize',6);
                plot(timestamp_reached(tt),tick_rr,'|','color',clr_rr,'linewidth',3,'MarkerSize',6);
                plot(timestamp_iti_start(tt):timestamp_iti_end(tt),ones(length(timestamp_iti_start(tt):timestamp_iti_end(tt)))*tick_rr,'color',clr_iti);
                plot(invalid_pull_intrial(tt,:),tick_pp,'|', 'color',clr_inval, 'linewidth', 2,'MarkerSize',6)
                plot(invalid_push_intrial(tt,:),tick_pp,'|', 'color',clr_inval,'linewidth', 2,'MarkerSize',6)
                set(gca,axeOpt{:})
                xlabel('timestamps harp (s)'); ylabel('x (px)')
                title('Reach position in trial: in timestamps')

                set(gcf,'Position',[2314 237 1240 719],'Color','w');
                if save_fig_flag, saveas(gcf,strcat(folders.out,filesep,'preProc',filesep,'timestamps_reach',num2str(r_ind),'trial',num2str(tt),'.png'),'png'); end
            end

            %% Power Spectrum of reach & cross-correlation of paws
            % powe spectrum of reach
            % Check frequency of movement in that reach
            [f_rr,P1x_rr,t_rr] = fft_analysis_vec(reach(:,1),frame_rate);
            [~,P1y_rr,~] = fft_analysis_vec(reach(:,2),frame_rate);
            [~,P1z_rr,~] = fft_analysis_vec(reach(:,3),frame_rate);
            P1_rr = cat(2,P1x_rr,P1y_rr,P1z_rr);
            tm_w = t_rr-t_rr(reach_goBack_frames+1);

            % Cross-correlation of both paws
            % chrek if non-dominant paw follows
            [r_x, lags_x] = xcov(reach(:,1),reach_otherPaw(:,1)); cov_x=cov(reach(:,1),reach_otherPaw(:,1));
            [r_y, lags_y] = xcov(reach(:,2),reach_otherPaw(:,2)); cov_y=cov(reach(:,2),reach_otherPaw(:,2));
            [r_z, lags_z] = xcov(reach(:,3),reach_otherPaw(:,3)); cov_z=cov(reach(:,3),reach_otherPaw(:,3));
            [max_rx, max_rxPos] = max(r_x); [max_rz, max_rzPos] = max(r_z);
            [min_rx, min_rxPos] = min(r_x); [min_rz, min_rzPos] = min(r_z);
            covTot = cat(1,cov_x(2),cov_y(2),cov_z(2));
            cov_r = cat(2,r_x,r_y,r_z); lags_r = cat(2,lags_x',lags_y',lags_z');

            % Distance travelled and speed of reach
            [dist_trav_reach,speed_3D_reach] = distance_travelled_and_speed(reach_speed,dt);



            %% ONSET OF REACH: FORWARD MOVEMENT & FROM STOP
            % FORWARD MOVEMENT ISOLATED
            % Check if paw started in resting bar/inverted the direction of reach
            min_reach_time = 28; % 60-70 ms
            reaching_frames_minimum = reach_goBack_frames-min_reach_time;
            min_frames_down = 6; % 10-15 ms
            close_zero = 1;
            % Find foward movement start
            t2 = reach_speed(:,1);
            zt2=zeros(size(t2)); zt2(t2>close_zero)=1; zt2(reaching_frames_minimum:end)=1;
            fzt2 = flip(zt2,1); fzt2(end)=1; % Flip zt2 to find the first stable rise timepoint
            if isempty(find(diff(fzt2)~=0,1)), fzt2(end)=0; fzt2(end-2)=0; end
            fjumps_loc=find(diff(fzt2)~=0); fjumps_down_loc=fjumps_loc((1:2:end)); % find the position of jumps down
            diff_jumps=diff(fjumps_loc); inv_rise_jumps_diff = diff_jumps(1:2:end); % find number of frames after jump
            inv_stable_rising_start=fjumps_down_loc(inv_rise_jumps_diff>min_frames_down); % Impose a min number of frames to consider stalbe rise
            if isempty(inv_stable_rising_start)
                [max_inv_steps,max_inv_steps_loc]=max(inv_rise_jumps_diff);
                inv_stable_rising_start=fjumps_down_loc(max_inv_steps_loc);
            end
            rising_start=numel(fzt2)-inv_stable_rising_start(1); % Invert back
            if numel(fzt2)-fjumps_down_loc(1)==rising_start
                no_turns_from_forw = 1;
            else
                no_turns_from_forw = 0;
            end
            % Duration of the continuously forward movement
            dur_forw = numel(rising_start:max_reach)/frame_rate;
            % Path length (distance travelled), displacement and tortuosity
            [dist_trav_forw,displacement_forw,tortuosity_forw] = tortuosity_calc_mm(reach,[rising_start,max_reach],[px2mm_xz px2mm_y px2mm_xz]);


            % ---------------------------------------------
            % ONSET FROM STOPPED POSITION IN X (not moving forward)
            min_frames_down_toStop = 8;
            close_zero_stopX =2;
            [rising_from_stop,onset_stop,binary_moving] = find_start_movement(abs(reach_speed(:,1)),close_zero_stopX,min_frames_down_toStop,rising_start+1);
            if onset_stop==1
                % Is the forward movement the eggining of movement?
                max_frames_diff_rise_start = 5;
                if abs(rising_from_stop-rising_start)<max_frames_diff_rise_start
                    forward_equal_startinX = 1;
                else
                    forward_equal_startinX = 0;
                end
                % Duration of reach from STOP, Path length, displacement & tortuosity
                dur_fromStop = numel(rising_from_stop:max_reach)/frame_rate;
                [dist_trav_fStop,displacement_fStop,tortuosity_fStop] = tortuosity_calc_mm(reach,[rising_from_stop,max_reach],[px2mm_xz px2mm_y px2mm_xz]);
            else
                forward_equal_startinX = nan;
            end

            % ---------------------------------------------
            % ONSET FROM STOPPED POSITION (no movement)
            %            close_zero_realStop = 3*max(px2mm_xz,px2mm_y)/dt;
            close_zero_realStop = 200;
            [rising_from_REALstop,onset_REALstop,binary_REALmoving] = find_start_movement(speed_3D_reach,close_zero_realStop,min_frames_down_toStop, rising_start+1);
            if (onset_REALstop==1 && onset_stop==1)
                if onset_stop==1
                    % Is the beggining of movement in x the beggining of movement?
                    if abs(rising_from_REALstop-rising_from_stop)<max_frames_diff_rise_start
                        startinX_equal_start = 1;
                    else
                        startinX_equal_start = 0;
                    end
                else
                    disp('something is wrong, stopped in all dims, but not in x alone...')
                end
                % Duration of reach from STOP, Path length, displacement & tortuosity
                dur_fromREALstop = numel(rising_from_REALstop:max_reach)/frame_rate;
                [dist_trav_fREALstop,displacement_fREALstop,tortuosity_fREALstop] = tortuosity_calc_mm(reach,[rising_from_REALstop,max_reach],[px2mm_xz px2mm_y px2mm_xz]);

            else
                startinX_equal_start = nan;
                dur_fromREALstop = nan;
                dist_trav_fREALstop = nan; displacement_fREALstop = nan; tortuosity_fREALstop=nan;
            end


            if show_plot
                figure
                subplot(411)
                plot(reach(:,1));
                xline(max_reach);
                xline(rising_start);
                if ~isnan(rising_from_stop), xline(rising_from_stop); end
                title('position in X')
                subplot(412)
                plot(reach_speed(:,1)); hold on
                plot(t2);
                plot(zt2,'.')
                xline(rising_start);
                xline(max_reach);  hold off
                title('speed in X, forward mov start')
                subplot(413)
                plot(reach_speed(:,1)); hold on
                plot(binary_moving,'.'); hold off
                if ~isnan(rising_from_stop), xline(rising_from_stop); end
                xline(max_reach);
                title('speed in X, movement in x start')
                subplot(414)
                plot(speed_3D_reach); hold on
                plot(binary_REALmoving*100,'.'); hold off
                if ~isnan(rising_from_stop), xline(rising_from_stop,'color',[.9 .9 .9]); end
                if ~isnan(rising_from_REALstop), xline(rising_from_REALstop,'linewidth',1.5); end
                xline(max_reach);
                title('speed 3D, overall movement start')
                set(gcf,'position',[680   160   777   818])
            end

            %% CATEGORIES
            % Reach Category
            % 1 -> balistic from resting bar
            % 2 -> lifted paw
            % 3 -> grooming / groomung-like
            % 4 -> lifted paw: drink/reach
            p1_max_cat3 = 90;
            cov_high = 250;
            max_z_lim = 200;
            %threshold_resting = 180;
            if strcmp(phenotype,'ctr')==1
                lags_lim = 8;
                lags_lim_z = 8;
            else
                lags_lim = 10;
                lags_lim_z = 20;
            end
            other_lag = 45;
            if strcmp(paw_pref,'R')
                threshold_resting = 180;
                threshold_drink = 240;
            elseif strcmp(paw_pref,'L')
                threshold_resting = 180;
                threshold_drink = 240;           
            end

            % GROOMING
            paws_covary_in_x = (frame_rate/2)-lags_lim<max_rxPos && max_rxPos<(frame_rate/2)+lags_lim;
            paws_covary_in_z = (frame_rate/2)-lags_lim_z<max_rzPos && max_rzPos<(frame_rate/2)+lags_lim_z;
            cov_peak_high =  cov_x(2)>cov_high && cov_z(2)>cov_high;

            % STARTING POSITION: PAW CLOSE TO RESTING BAR
            start_forward_mov_resting = nanmedian(cat(1,reach(rising_start,1),reach(rising_start-1,1)))< threshold_resting;
            if onset_stop==1
                start_from_stop_resting = nanmedian(cat(1,reach(rising_from_stop,1),reach(rising_from_stop-1,1)))< threshold_resting;
            else
                start_from_stop_resting = false;
            end

            % STARTING POSITION: PAW LIFTED, YET ITS A REACH
            start_forward_mov_lifted = nanmedian(cat(1,reach(rising_start,1),reach(rising_start-1,1)))< threshold_drink;
            if onset_stop==1
                start_from_stop_lifted = nanmedian(cat(1,reach(rising_from_stop,1),reach(rising_from_stop-1,1)))< threshold_drink;
            else
                start_from_stop_lifted = false;
            end
            mean_reach_until_reach = nanmean(reach(1:max_reach,1));



            if ( ...
                    (paws_covary_in_x &&  paws_covary_in_z && (max(reach(:,3))>max_z_lim || max(reach_otherPaw(:,3))>max_z_lim) ) || ...
                    (paws_covary_in_x && cov_peak_high  &&  (max(reach(:,3))>max_z_lim || max(reach_otherPaw(:,3))>max_z_lim) ) ...
                    )
                % && ((frame_rate/2)-other_lag<max_rzPos && max_rzPos<(frame_rate/2)+other_lag) ...
                % && P1x_rr(2)<p1_max_cat3
                %((frame_rate/2)-lags_lim<max_rzPos && max_rzPos<(frame_rate/2)+lags_lim && cov_z(2)>250 && P1x_rr(2)<p1_max_cat3 && (frame_rate/2)-other_lag<max_rxPos && max_rxPos<(frame_rate/2)+other_lag)...
                which_cat = 3;

                % STARTING POSITION: PAW CLOSE TO RESTING BAR
            elseif  (start_from_stop_resting || start_forward_mov_resting)
                which_cat = 1;

                % STARTING POSITION: PAW LIFTED
            else
                if ~(start_from_stop_lifted || start_forward_mov_lifted) && mean_reach_until_reach>threshold_drink
                    which_cat = 4;
                else
                    which_cat = 2;
                end
            end


            % check if non-dominant paw is lifted at reach maximum
            if reach_otherPaw(max_reach,1)<threshold_resting
                is_nonDomPaw_resting = 1;
            else
                is_nonDomPaw_resting = 0;
            end


            %% Reach Class
            % PURPOSFULL OR NOT?
            if rr < purpose_length(end)
                is_purpose_reach = 1;

                % HIT OR MISS?
                if ( (rr == xmax_frame(nreaches_trial) && purpose_length(end)<n_max_points) ...
                        || (rr ~= xmax_frame(nreaches_trial) && xmax_frame(r_ind+1)>purpose_length(end)) )
                    is_hit = 1;
                    % check if water was misidentified as reached in that trial
                    if rr > water_reached_frame(tt)       
                        hit_later_than_detection(tt) = 1;
                    else
                        hit_later_than_detection(tt) = 0;
                    end

                    % SUCCESS OR FAILURE?
                    % Range around reach
                    if rr<=100
                        aroud_reach=1:rr+300;
                    elseif rr+300>n_max_points
                        aroud_reach=rr-100:n_max_points;
                    else
                        aroud_reach=rr-100:rr+300;
                    end

                    % Cofidence bound, and defining ROI outside med position of water
                    pp=95;
                    magnitude_largerThanBound = 10;
                    CIs = prctile(water(:,:,tt),abs([0,100]-(100-pp)/2));
                    median_water=nanmedian(water(:,:,tt));
                    diff_medCI=max(abs(median_water-CIs));
                    lim_waterOut=magnitude_largerThanBound*diff_medCI;
                    %figure,plot(abs(water(:,:,tt)-median_water))

                    % Position of water outside CI around reach
                    w_ar=squeeze(water(aroud_reach,:,tt));
                    pos_out_x=find(abs(w_ar(:,1)-median_water(1))>lim_waterOut(1));
                    pos_out_y=find(abs(w_ar(:,2)-median_water(2))>lim_waterOut(2));
                    pos_out_z=find(abs(w_ar(:,3)-median_water(3))>lim_waterOut(3));
                    count_outROI = [numel(pos_out_x), numel(pos_out_y), numel(pos_out_z)];

                    % Threshold outside ROI
                    threshold_x_max = 420; threshold_x_min = 100;
                    threshold_y_max = 320; threshold_y_min = 90; %150
                    threshold_z_max = 350; threshold_z_min = 90;
                    % Plot
                    if show_plot
                        figure(8)
                        subplot(311)
                        plot(water(:,1,tt),'.'); ylabel('x')
                        hold on
                        plot(xmax_frame(r_ind),median_water(1),'o','LineWidth',2)
                        plot(aroud_reach(1)-1+pos_out_x,water(aroud_reach(1)-1+pos_out_x,1,tt),'.')
                        line([0,aroud_reach(end)], [CIs(1,1),CIs(1,1)],'Color',[0 0 0])
                        line([0,aroud_reach(end)], [CIs(2,1),CIs(2,1)],'Color',[0 0 0])
                        plot(aroud_reach(w_ar(:,1)>threshold_x_max),w_ar(w_ar(:,1)>threshold_x_max,1),'y.')
                        plot(aroud_reach(w_ar(:,1)<threshold_x_min),w_ar(w_ar(:,1)<threshold_x_min,1),'y.')
                        hold off
                        subplot(312)
                        plot(water(:,2,tt),'.'); ylabel('y')
                        hold on
                        plot(xmax_frame(r_ind),median_water(2),'o','LineWidth',2)
                        plot(aroud_reach(1)-1+pos_out_y,water(aroud_reach(1)-1+pos_out_y,2,tt),'.')
                        line([0,aroud_reach(end)], [CIs(1,2),CIs(1,2)],'Color',[0 0 0])
                        line([0,aroud_reach(end)], [CIs(2,2),CIs(2,2)],'Color',[0 0 0])
                        plot(aroud_reach(w_ar(:,2)>threshold_y_max),w_ar(w_ar(:,2)>threshold_y_max,2),'y.')
                        plot(aroud_reach(w_ar(:,2)<threshold_y_min),w_ar(w_ar(:,2)<threshold_y_min,2),'y.')
                        hold off
                        subplot(313)
                        plot(water(:,3,tt),'.'); ylabel('z')
                        hold on
                        plot(xmax_frame(r_ind),median_water(3),'o','LineWidth',2)
                        plot(aroud_reach(1)-1+pos_out_z,water(aroud_reach(1)-1+pos_out_z,3,tt),'.')
                        line([0,aroud_reach(end)], [CIs(1,3),CIs(1,3)],'Color',[0 0 0])
                        line([0,aroud_reach(end)], [CIs(2,3),CIs(2,3)],'Color',[0 0 0])
                        plot(aroud_reach(w_ar(:,3)>threshold_z_max),w_ar(w_ar(:,3)>threshold_z_max,3),'y.')
                        plot(aroud_reach(w_ar(:,3)<threshold_z_min),w_ar(w_ar(:,3)<threshold_z_min,3),'y.')
                        hold off
                        %saveas(gcf,strcat(folders.out,filesep,'successORmiss_trial',num2str(tt),'.png'),'png');
                    end

                    max_outliers=10;
                    z_w_ar=w_ar(w_ar(:,3)<threshold_z_min,3);
                    y_w_ar=w_ar(w_ar(:,2)>threshold_y_max,2);
                    if (...
                            numel(find(w_ar(:,1)>threshold_x_max))>0 || numel(find(w_ar(:,1)<threshold_x_min))>0 || ...  % frames with water outside ROI or to the sides
                            (numel(find(w_ar(:,2)>threshold_y_max))>2 && max(y_w_ar)==y_w_ar(end)) || numel(find(w_ar(:,2)<threshold_y_min))>1 || ...
                            numel(find(w_ar(:,3)>threshold_z_max))>0 || (numel(find(w_ar(:,3)<threshold_z_min))>1 && min(z_w_ar)==z_w_ar(end)) )
                        %    (max(count_outROI)>=max_outliers && numel(find(creount_outROI==0))<=1) || ...
                        is_success = 0;
                    else
                        is_success = 1;
                    end
                else
                    is_hit = 0;
                    is_success = nan;
                end
            else
                is_purpose_reach = 0;
                is_hit = nan;
                is_success = nan;
            end

            % check if non-dominant paw is lifted at reach maximum
            if reach_otherPaw(max_reach,1)<threshold_resting
                is_nonDomPaw_resting = 1;
            else
                is_nonDomPaw_resting = 0;
            end

            % ---------------------
            %% FIGURE: REACH

            % plot
            if show_overview_reach_plot==true
                close(figure(10))
                fig_reach_prop = figure(10);
                set(fig_reach_prop,figOpt{:})
                clrs = get(gca,'ColorOrder');
                if (onset_stop==0 && onset_REALstop==0)
                    annotation('textbox', [0.004, 0.84, 0.096, 0.11],'String',{...
                        "FORWARD BALISTIC", "MOVEMENT",...
                        "rising forward = " + sprintf('%.3f',tm_w(rising_start)),...
                        "no turns from forw = " + no_turns_from_forw,...
                        "distance trav = " + sprintf('%.1f',dist_trav_forw) + " mm",...
                        "displacement = " + sprintf('%.1f',displacement_forw)+ " mm",...
                        "tortuosity = " + sprintf('%.2f',tortuosity_forw),...
                        "",...
                        "MOVEMENT ONSET","FROM STOP",...
                        "always moving...",...
                        "rising from stop = " + num2str(rising_from_stop),...
                        }, 'FitBoxToText','on')

                elseif (onset_stop==1 && onset_REALstop==0)
                    annotation('textbox', [0.004, 0.84, 0.096, 0.11],'String',{...
                        "FORWARD BALISTIC", "MOVEMENT",...
                        "rising forward = " + sprintf('%.3f',tm_w(rising_start)),...
                        "no turns from forw = " + no_turns_from_forw,...
                        "distance trav = " + sprintf('%.1f',dist_trav_forw) + " mm",...
                        "displacement = " + sprintf('%.1f',displacement_forw)+ " mm",...
                        "tortuosity = " + sprintf('%.3f',tortuosity_forw),...
                        "",...
                        "MOVEMENT ONSET","FROM STOP",...
                        "rising from stop = " + sprintf('%.3f',tm_w(rising_from_stop)),...
                        "same as forward = " + forward_equal_startinX,...
                        "distance trav = " + sprintf('%.1f',dist_trav_fStop) + " mm",...
                        "displacement = " + sprintf('%.1f',displacement_fStop)+ " mm",...
                        "tortuosity = " + sprintf('%.3f',tortuosity_fStop),...
                        "", "only stopped in X...",...
                        }, 'FitBoxToText','on')
                else
                    annotation('textbox', [0.004, 0.84, 0.096, 0.11],'String',{...
                        "FORWARD BALISTIC", "MOVEMENT",...
                        "rising forward = " + sprintf('%.3f',tm_w(rising_start)),...
                        "no turns from forw = " + no_turns_from_forw,...
                        "distance trav = " + sprintf('%.1f',dist_trav_forw) + " mm",...
                        "displacement = " + sprintf('%.1f',displacement_forw)+ " mm",...
                        "tortuosity = " + sprintf('%.3f',tortuosity_forw),...
                        "",...
                        "MOVEMENT ONSET","FROM STOP IN X",...
                        "rising from stop = " + sprintf('%.3f',tm_w(rising_from_stop)),...
                        "same as forward = " + forward_equal_startinX,...
                        "distance trav = " + sprintf('%.1f',dist_trav_fStop) + " mm",...
                        "displacement = " + sprintf('%.1f',displacement_fStop)+ " mm",...
                        "tortuosity = " + sprintf('%.3f',tortuosity_fStop),...
                        "",...
                        "MOVEMENT ONSET","FROM REAL STOP",...
                        "rising from stop = " + sprintf('%.3f',tm_w(rising_from_REALstop)),...
                        "same as forward = " + startinX_equal_start,...
                        "distance trav = " + sprintf('%.1f',dist_trav_fREALstop) + " mm",...
                        "displacement = " + sprintf('%.1f',displacement_fREALstop)+ " mm",...
                        "tortuosity = " + sprintf('%.3f',tortuosity_fREALstop),...
                        }, 'FitBoxToText','on')
                end

                if which_cat==3
                    annotation('textbox', [0.004, 0.32, 0.15, 0.16],'String',[...
                        "CATEGORY:", "- gromming",...
                        ], 'FitBoxToText','on')
                elseif which_cat==4
                    annotation('textbox', [0.004, 0.32, 0.15, 0.16],'String',[...
                        "CATEGORY:", "- drink / reach(ish)",...
                        ], 'FitBoxToText','on')
                elseif which_cat==1
                    annotation('textbox', [0.004, 0.32, 0.15, 0.16],'String',{...
                        "CATEGORY:", "- reaching",...
                        "- SP: (close) resting bar","",...
                        "Fwd start @ rest: " + start_forward_mov_resting,...
                        "Mov start @ rest: " + start_from_stop_resting,"",...
                        "no turns from forw: " +  sprintf('%.0f',logical(no_turns_from_forw)),...
                        "foward mov=startX: " +  sprintf('%.0f',forward_equal_startinX),...
                        "startX=global start: " + sprintf('%.0f',(startinX_equal_start))...
                        },'EdgeColor',[0 0 .0], 'FitBoxToText','on');
                elseif which_cat==2
                    annotation('textbox', [0.004, 0.32, 0.15, 0.16],'String',{...
                        "CATEGORY:", "- reaching",...
                        "- SP: lifted paw","",...
                        "no turns from forw: " +  sprintf('%.0f',no_turns_from_forw),...
                        "foward mov=startX: " +  sprintf('%.0f',forward_equal_startinX),...
                        "startX=global start: " + sprintf('%.0f',startinX_equal_start)...
                        },'EdgeColor',[0 0 .0], 'FitBoxToText','on');
                end

                annotation('textbox', [0.004, 0.09, 0.15, 0.16],'String',{...
                    "TRIAL " + tt + " , REACH " + r_ind,...
                    "A1: " + which_pp + ", A2: "+ where_is_water,"",...
                    "CLASSIFICATION",...
                    "purposeful (or not)? " + sprintf('%.0f',is_purpose_reach),...
                    "hit (or miss)? " + sprintf('%.0f',is_hit),...
                    "success (or fail)? " + sprintf('%.0f',is_success),"",...
                    }, 'FitBoxToText','on');

                subplot(4,4,1)
                plot(tm_w,reach(:,1),'linewidth',1.5); hold on
                plot(tm_w,reach_otherPaw(:,1),'Color',clrs(2,:),'linewidth',1.5);
                xline(tm_w(max_reach),'--','color',clrs(3,:));
                xline(tm_w(rising_start),'--','color',[.7 .7 .7]);
                yline(threshold_resting,'--','color',[.93 .93 .93]);
                yline(threshold_drink,'--','color',[.95 .95 .95]);
                if ~isnan(rising_from_stop), xline(tm_w(rising_from_stop),'--','color',[.3 .3 .3]); end
                if ~isnan(rising_from_REALstop), xline(tm_w(rising_from_REALstop),'--','color','k','linewidth',1.5); end
                ylabel('x (px)'); xlabel('time (sec)'); hold off
                title('Position')
                axis([min(tm_w) max(tm_w) 0 380])
                set(gca,axeOpt{:})
                subplot(4,4,2)
                plot(tm_w,reach_speed(:,1)./dt,'linewidth',1.5); hold on
                xline(tm_w(max_reach),'--','color',clrs(3,:));
                xline(tm_w(rising_start),'--','color',[.7 .7 .7]);
                if ~isnan(rising_from_stop), xline(tm_w(rising_from_stop),'--','color',[.3 .3 .3]); end
                if ~isnan(rising_from_REALstop), xline(tm_w(rising_from_REALstop),'--','color','k','linewidth',1.5); end
                yline(0,'--','color',[.9 .9 .9]);
                ylabel('x (px/s)'); xlabel('time (sec)'); hold off
                title('Speed')
                xlim([min(tm_w) max(tm_w)])
                set(gca,axeOpt{:})
                subplot(4,4,3)
                plot(f_rr(2:end),P1x_rr(2:end),'linewidth',1.5); grid on
                title('Power Spectrum')
                xlabel('f (Hz)'); ylabel('|P1(f)| in x')
                set(gca,axeOpt{:})
                subplot(4,4,4)
                plot(lags_x/frame_rate,r_x,'k','linewidth',1.5); grid on
                xlabel('lags (s)'); ylabel('covariance in x')
                title(strcat('paws covariance = ',num2str(cov_x(2))))
                set(gca,axeOpt{:})

                subplot(4,4,5)
                plot(tm_w,reach(:,2),'linewidth',1.5); hold on
                plot(tm_w,reach_otherPaw(:,2),'Color',clrs(2,:),'linewidth',1.5);
                xline(tm_w(max_reach),'--','color',clrs(3,:));
                xline(tm_w(rising_start),'--','color',[.7 .7 .7]);
                if ~isnan(rising_from_stop), xline(tm_w(rising_from_stop),'--','color',[.3 .3 .3]); end
                if ~isnan(rising_from_REALstop), xline(tm_w(rising_from_REALstop),'--','color','k','linewidth',1.5); end
                ylabel('y (px)'); xlabel('time (sec)'); hold off
                axis([min(tm_w) max(tm_w) 70 500])
                set(gca,axeOpt{:})
                subplot(4,4,6)
                plot(tm_w,reach_speed(:,2)./dt,'linewidth',1.5); hold on
                yline(0,'--','color',[.9 .9 .9]);
                xline(tm_w(max_reach),'--','color',clrs(3,:));
                xline(tm_w(rising_start),'--','color',[.7 .7 .7]);
                if ~isnan(rising_from_stop), xline(tm_w(rising_from_stop),'--','color',[.3 .3 .3]); end
                if ~isnan(rising_from_REALstop), xline(tm_w(rising_from_REALstop),'--','color','k','linewidth',1.5); end
                ylabel('y (px/s)'); xlabel('time (sec)'); hold off
                xlim([min(tm_w) max(tm_w)])
                set(gca,axeOpt{:})
                subplot(4,4,7)
                plot(f_rr(2:end),P1y_rr(2:end),'linewidth',1.5); grid on
                xlabel('f (Hz)'); ylabel('|P1(f)| in y')
                set(gca,axeOpt{:})
                subplot(4,4,8)
                plot(lags_y/frame_rate,r_y,'k','linewidth',1.5); grid on
                xlabel('lags (s)'); ylabel('covariance in y')
                title(strcat('paws covariance = ',num2str(cov_y(2))))
                set(gca,axeOpt{:})

                subplot(4,4,9)
                plot(tm_w,reach(:,3),'linewidth',1.5); hold on
                plot(tm_w,reach_otherPaw(:,3),'Color',clrs(2,:),'linewidth',1.5);
                xline(tm_w(max_reach),'--','color',clrs(3,:));
                xline(tm_w(rising_start),'--','color',[.7 .7 .7]);
                yline(max_z_lim,'--','color',[.96 .95 .95]);
                if ~isnan(rising_from_stop), xline(tm_w(rising_from_stop),'--','color',[.3 .3 .3]); end
                if ~isnan(rising_from_REALstop), xline(tm_w(rising_from_REALstop),'--','color','k','linewidth',1.5); end
                ylabel('z (px)'); xlabel('time (sec)'); hold off
                axis([min(tm_w) max(tm_w) 20 320])
                set(gca,axeOpt{:})
                subplot(4,4,10)
                plot(tm_w,reach_speed(:,3)./dt,'linewidth',1.5); hold on
                yline(0,'--','color',[.9 .9 .9]);
                xline(tm_w(max_reach),'--','color',clrs(3,:));
                xline(tm_w(rising_start),'--','color',[.7 .7 .7]);
                if ~isnan(rising_from_stop), xline(tm_w(rising_from_stop),'--','color',[.3 .3 .3]); end
                if ~isnan(rising_from_REALstop), xline(tm_w(rising_from_REALstop),'--','color','k','linewidth',1.5); end
                ylabel('z (px/s)'); xlabel('time (sec)'); hold off
                xlim([min(tm_w) max(tm_w)])
                set(gca,axeOpt{:})
                subplot(4,4,11)
                plot(f_rr(2:end),P1z_rr(2:end),'linewidth',1.5); grid on
                xlabel('f (Hz)'); ylabel('|P1(f)| in z')
                set(gca,axeOpt{:})
                subplot(4,4,12)
                plot(lags_z/frame_rate,r_z,'k','linewidth',1.5); grid on
                xlabel('lags (s)'); ylabel('covariance in z')
                title(strcat('paws covariance = ',num2str(cov_z(2))))
                set(gca,axeOpt{:})

                subplot(4,4,13)
                plot(tm_w,dist_trav_reach,'Color',clrs(1,:),'linewidth',1.5)
                xline(tm_w(max_reach),'--','color',clrs(3,:));
                xline(tm_w(rising_start),'--','color',[.7 .7 .7]);
                if ~isnan(rising_from_stop), xline(tm_w(rising_from_stop),'--','color',[.3 .3 .3]); end
                if ~isnan(rising_from_REALstop), xline(tm_w(rising_from_REALstop),'--','color','k','linewidth',1.5); end
                ylabel('distance travelled (px)'); xlabel('time (sec)'); hold off
                xlim([min(tm_w) max(tm_w)])
                set(gca,axeOpt{:})
                %title('Distance Travelled')
                subplot(4,4,14)
                plot(tm_w,speed_3D_reach,'Color',clrs(1,:),'linewidth',1.5)
                xline(tm_w(max_reach),'--','color',clrs(3,:));
                xline(tm_w(rising_start),'--','color',[.7 .7 .7]);
                if ~isnan(rising_from_stop), xline(tm_w(rising_from_stop),'--','color',[.3 .3 .3]); end
                yline(close_zero_realStop,'--','color',[.9 .9 .9]);
                if ~isnan(rising_from_REALstop), xline(tm_w(rising_from_REALstop),'--','color','k','linewidth',1.5); end
                ylabel('speed (px/s)'); xlabel('time (sec)'); hold off
                xlim([min(tm_w) max(tm_w)])
                set(gca,axeOpt{:})
                %title('Absolut Speed')

                subplot(4,4,[15,16])
                plot(t_domPaw_x,'color', [.5 .5 .5]); hold on
                plot(ppNonDom_paw(1:siz(tt),1,tt),'color',[.8 .8 .8]);
                plot(t_water_x,'color','k');
                hold on
                plot(reach_curr,reach(1:numel(reach_curr),1),'color',clrs(1,:),'linewidth',1.5);
                plot(reach_curr,reach_otherPaw(1:numel(reach_curr),1),'color',clrs(2,:),'linewidth',1.5);
                plot(xmax_frame,xmax,'*','LineWidth',1,'color',clrs(3,:))
                %plot(purpose_length,ones(1,numel(purpose_length)).*pkheight,'--k');
                tick_pp = 360;
                tick_rr = 360;
                plot(water_delivered_frame(tt),tick_pp,'|','color',clr_pp,'linewidth',3,'MarkerSize',6);
                plot(water_reached_frame(tt),tick_rr,'|','color',clr_rr,'linewidth',3,'MarkerSize',6);
                plot(iti_start_frame(tt):iti_end_frame(tt),ones(length(iti_start_frame(tt):iti_end_frame(tt)))*tick_rr,'color',clr_iti);
                plot(invalid_pull_frame(tt,:),tick_pp,'|', 'color',clr_inval, 'linewidth', 2,'MarkerSize',6)
                plot(invalid_push_frame(tt,:),tick_pp,'|', 'color',clr_inval,'linewidth', 2,'MarkerSize',6)
                set(gca,axeOpt{:})
                xlabel('frames in trial'); ylabel('x (px)')
                title('Reach position in trial')

                set(fig_reach_prop,'Position',[2039 89 1736 897])
                if save_fig_flag
                    saveas(gcf, strcat(folder_reches_overview,filesep,'reach',num2str(r_ind),'_trial',num2str(tt),'.png'),'png');
                end

            end

            % ---------------------
            %% Update Reach Variables
            r_num=r_num+1;
            reach_trial = cat(1,reach_trial,tt);
            reach_range_mat = cat(1,reach_range_mat,reach_range);
            reach_timestamps_mat = cat(1,reach_timestamps_mat,reach_timestamps);
            reach_mat = cat(3,reach_mat,reach);
            reach_otherPaw_mat = cat(3,reach_otherPaw_mat,reach_otherPaw);
            water_reach_mat = cat(3,water_reach_mat,water_reach);
            reach_speed_mat = cat(3,reach_speed_mat,reach_speed);

            P1_mat = cat(3, P1_mat, P1_rr);
            cov_r_mat = cat(3,cov_r_mat,cov_r);
            lags_r_mat = cat(3,lags_r_mat,lags_r);
            covTot_mat = cat(2,covTot_mat,covTot);

            start_forw = cat(1,start_forw,rising_start);
            no_turn_from_forw_mat = cat(1,no_turn_from_forw_mat,no_turns_from_forw);
            dur_forw_mat = cat(1,dur_forw_mat,dur_forw);
            dist_trav_forw_mat = cat(1,dist_trav_forw_mat,dist_trav_forw);
            displacement_forw_mat = cat(1,displacement_forw_mat,displacement_forw);
            tortuosity_forw_mat = cat(1,tortuosity_forw_mat,tortuosity_forw);

            start_stopX = cat(1,start_stopX,rising_from_stop);
            onset_stop_mat = cat(1,onset_stop_mat,onset_stop);
            forward_equal_startinX_mat = cat(1,forward_equal_startinX_mat,forward_equal_startinX);
            dur_fromStop_mat = cat(1,dur_fromStop_mat,dur_fromStop);
            dist_trav_fStop_mat = cat(1,dist_trav_fStop_mat,dist_trav_fStop);
            displacement_fStop_mat = cat(1,displacement_fStop_mat,displacement_fStop);
            tortuosity_fStop_mat = cat(1,tortuosity_fStop_mat,tortuosity_fStop);

            start_realStop = cat(1,start_realStop,rising_from_REALstop);
            onset_REALstop_mat = cat(1,onset_REALstop_mat,onset_REALstop);
            startinX_equal_start_mat = cat(1,startinX_equal_start_mat,startinX_equal_start);
            dur_fromREALstop_mat = cat(1,dur_fromREALstop_mat,dur_fromREALstop);
            dist_trav_fREALstop_mat = cat(1,dist_trav_fREALstop_mat,dist_trav_fREALstop);
            displacement_fREALstop_mat = cat(1,displacement_fREALstop_mat,displacement_fREALstop);
            tortuosity_fREALstop_mat = cat(1,tortuosity_fREALstop_mat,tortuosity_fREALstop);

            cat_reach = cat(1,cat_reach,which_cat);
            start_forward_mov_resting_mat  =cat(1,start_forward_mov_resting_mat,start_forward_mov_resting);
            start_from_stop_resting_mat = cat(1,start_from_stop_resting_mat,start_from_stop_resting);
            purpose_reach = cat(1,purpose_reach,is_purpose_reach);
            hit_reach = cat(1,hit_reach,is_hit);
            success_reach = cat(1,success_reach,is_success);
            nonDomPaw_resting = cat(1,nonDomPaw_resting,is_nonDomPaw_resting);

        end % end of if there are reaches in trial
    end % end of reach loop
end % end trial loop


%% SAVE VARIABLES

% session video params
session.video.width = width;
session.video.height = height;
session.video.calib.px2mm.px2mm_xz = px2mm_xz;
session.video.calib.px2mm.px2mm_y = px2mm_y;
session.video.calib.offset_c2a = offset_c2a;
session.video.calib.offset_c2a_z = offset_c2a_z;
session.video.resnet = resnet;
session.video.frame_rate = frame_rate;
session.video.T = T;
session.video.likelihood_threshold = likelihood_threshold;
% session data params
session.mouse_info.phenotype = phenotype;
session.mouse_info.paw_pref = paw_pref;
session.params.interpol_clean_params.mov_win = mov_win;
session.params.interpol_clean_params.thres_jmp = thres_jmp;
session.params.interpol_clean_params.maxY_R = maxY_R;
session.params.interpol_clean_params.maxY_L = maxY_L;
session.params.derivative.N = N_v;
session.params.derivative.K = K;
session.params.derivative.F = F;

% Session data variables
session.session = sess;
session.ppDom_paw_sess = ppDom_paw_sess;
session.ppNonDom_paw_sess = ppNonDom_paw_sess;
session.speed_DomPaw_sess = speed_DomPaw_sess;
session.ppDom_paw_sess = ppDom_paw_sess;
session.dist_trav_3D = dist_trav_3D;
session.speed_3D_DomPaw = speed_3D_DomPaw;
session.tm = tm;
session.dt = dt;
% IRI
session.pks_sess = pks_sess;
session.pks_frames = pks_frames;
% Sessiom frequency properties
session.fft.freq = f;
session.fft.P1.P1x = P1x;
session.fft.P1.P1y = P1y;
session.fft.P1.P1z = P1z;
session.fft.nP1.nP1x = nP1x;
session.fft.nP1.nP1y = nP1y;
session.fft.nP1.nP1z = nP1z;
session.siz_sess = siz_sess;

% Trial synccing variables
% Synccing vairables
trials.sync.frames_timestamps = frames_timestamps;
trials.sync.timestamp_delivered = timestamp_delivered;
trials.sync.timestamp_reached = timestamp_reached;
trials.sync.timestamp_iti_start = timestamp_iti_start;
trials.sync.timestamp_iti_end = timestamp_iti_end;

trials.sync.water_delivered_frame = water_delivered_frame;
trials.sync.water_reached_frame = water_reached_frame;
trials.sync.iti_start_frame = iti_start_frame;
trials.sync.iti_end_frame = iti_end_frame;

trials.sync.invalid_push_intrial = invalid_push_intrial;
trials.sync.invalid_pull_intrial = invalid_pull_intrial;
trials.sync.invalid_push_frame = invalid_push_frame;
trials.sync.invalid_pull_frame = invalid_pull_frame;
trials.sync.len_inval_push = len_inval_push;
trials.sync.len_inval_pull = len_inval_pull;
trials.sync.invalid_push_timestamps_all = invalid_push_timestamps_all;
trials.sync.invalid_pull_timestamps_all = invalid_pull_timestamps_all;

trials.is_push_trial = is_push_trial;
trials.water_location_trial =  water_location_trial;

% trial data variables
trials.ppDom_paw = ppDom_paw;
trials.ppNonDom_paw = ppNonDom_paw;
trials.speed_DomPaw = speed_DomPaw;
trials.water = water;
% other trial varaibles
trials.nreaches_each_trial = nreaches_each_trial;
trials.first_attempt = trial_first_attempt;
trials.last_frame_wWater = last_frame_wWater;
trials.time_to_hit = time_to_hit;
trials.n_trials = n_trials;
trials.size_trial = siz;
trials.hit_later_than_detection = hit_later_than_detection;
% Trial paramers
trials.trial_params.find_peaks.prec_close_water = prec_close_water;
trials.trial_params.find_peaks.pkheight = pkheight;
trials.trial_params.find_peaks.pkdist = pkdist;
trials.trial_params.find_peaks.pkprominence = pkprominence;
trials.trial_params.water_availability.extra_frames = extra_frames;
trials.trial_params.water_availability.nan_min = nan_min;

% reaches data variables
reaches.r_num = r_num;
reaches.reach_trial =reach_trial;
reaches.reach_range_mat = reach_range_mat;
reaches.reach_timestamps_mat = reach_timestamps_mat;
reaches.reach_mat = reach_mat;
reaches.reach_otherPaw_mat = reach_otherPaw_mat;
reaches.water_reach_mat = water_reach_mat;
reaches.reach_speed_mat = reach_speed_mat;
reaches.tm_w = tm_w;
reaches.fft.f_rr = f_rr;
reaches.fft.t_rr = t_rr;
reaches.fft.P1_mat = P1_mat;
reaches.cov.cov_r_mat =cov_r_mat;
reaches.cov.lags_r_mat = lags_r_mat;
reaches.cov.covTot_mat = covTot_mat;
% start forw
reaches.start_forw.start_forw = start_forw;
reaches.start_forw.no_turn_from_forw_mat = no_turn_from_forw_mat;
reaches.start_forw.dur_forw_mat = dur_forw_mat;
reaches.start_forw.dist_trav_forw_mat = dist_trav_forw_mat;
reaches.start_forw.displacement_forw_mat = displacement_forw_mat;
reaches.start_forw.tortuosity_forw_mat = tortuosity_forw_mat;
% start stopX
reaches.start_stopX.start_stopX = start_stopX;
reaches.start_stopX.onset_stop_mat = onset_stop_mat;
reaches.start_stopX.forward_equal_startinX_mat = forward_equal_startinX_mat;
reaches.start_stopX.dur_fromStop_mat = dur_fromStop_mat;
reaches.start_stopX.dist_trav_fStop_mat = dist_trav_fStop_mat;
reaches.start_stopX.displacement_fStop_mat = displacement_fStop_mat;
reaches.start_stopX.tortuosity_fStop_mat  = tortuosity_fStop_mat;
% start realStop
reaches.start_realStop.start_realStop = start_realStop;
reaches.start_realStop.onset_REALstop_mat = onset_REALstop_mat;
reaches.start_realStop.startinX_equal_start_mat = startinX_equal_start_mat;
reaches.start_realStop.dur_fromREALstop_mat = dur_fromREALstop_mat;
reaches.start_realStop.dist_trav_fREALstop_mat = dist_trav_fREALstop_mat;
reaches.start_realStop.displacement_fREALstop_mat = displacement_fREALstop_mat;
reaches.start_realStop.tortuosity_fREALstop_mat = tortuosity_fREALstop_mat;
% reach category/class
reaches.cat_reach = cat_reach;
reaches.start_forward_mov_resting_mat = start_forward_mov_resting_mat;
reaches.start_from_stop_resting_mat = start_from_stop_resting_mat;
reaches.purpose_reach = purpose_reach;
reaches.hit_reach = hit_reach;
reaches.success_reach = success_reach;
reaches.nonDomPaw_resting = nonDomPaw_resting;

% reaches params
reaches.reach_params.reach_interval.reach_goBack_frames = reach_goBack_frames;
reaches.reach_params.reach_interval.reach_goFront_frames = reach_goFront_frames;
reaches.reach_params.reach_interval.max_reach = max_reach;
reaches.reach_params.start_reach.min_reach_time = min_reach_time;
reaches.reach_params.start_reach.reaching_frames_minimum = reaching_frames_minimum;
reaches.reach_params.start_reach.min_frames_down = min_frames_down;
reaches.reach_params.start_reach.close_zero = close_zero;
reaches.reach_params.start_reach.min_frames_down_toStop = min_frames_down_toStop;
reaches.reach_params.start_reach.close_zero_stopX  = close_zero_stopX;
reaches.reach_params.start_reach.close_zero_realStop = close_zero_realStop;
reaches.reach_params.cat_and_class.p1_max_cat3 = p1_max_cat3;
reaches.reach_params.cat_and_class.lags_lim  = lags_lim;
reaches.reach_params.cat_and_class.lags_lim_z = lags_lim_z;
reaches.reach_params.cat_and_class.other_lag = other_lag;
reaches.reach_params.cat_and_class.threshold_resting = threshold_resting;
reaches.reach_params.cat_and_class.threshold_drink = threshold_drink;
reaches.reach_params.cat_and_class.max_z_lim = max_z_lim;
reaches.reach_params.cat_and_class.succ.pp = pp;
reaches.reach_params.cat_and_class.succ.magnitude_largerThanBound = magnitude_largerThanBound;
reaches.reach_params.cat_and_class.succ.threshold_x_max = threshold_x_max;
reaches.reach_params.cat_and_class.succ.threshold_x_min = threshold_x_min;
reaches.reach_params.cat_and_class.succ.threshold_y_max = threshold_y_max;
reaches.reach_params.cat_and_class.succ.threshold_y_min = threshold_y_min;
reaches.reach_params.cat_and_class.succ.threshold_z_max = threshold_z_max;
reaches.reach_params.cat_and_class.succ.threshold_z_min = threshold_z_min;
reaches.reach_params.cat_and_class.succ.max_outliers = max_outliers;




% save(strcat(char(folders.mat),filesep,'session_reaching_data_paw',paw_pref,'.mat'),...
%     'reaches','trials','session','folders','mouse_info','-v7.3')
save(strcat(char(folders.mat),filesep,'session_reaching_data_paw','.mat'),...
    'reaches','trials','session','folders','mouse_info','-v7.3')
disp('Finished session!')


%end % close session loop
disp('All done!!!')
















